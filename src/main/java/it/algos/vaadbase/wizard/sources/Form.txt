package it.algos.@MODULELOWER@.modules.@PACKAGE@;

import java.util.function.BiConsumer;
import java.util.function.Consumer;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.converter.StringToIntegerConverter;
import com.vaadin.flow.data.validator.IntegerRangeValidator;
import com.vaadin.flow.data.validator.StringLengthValidator;
import it.algos.vaadbase.annotation.AIScript;
import it.algos.vaadbase.presenter.IAPresenter;
import it.algos.vaadbase.ui.dialog.AForm;
import lombok.extern.slf4j.Slf4j;
import it.algos.vaadbase.backend.service.IAService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import static it.algos.@MODULELOWER@.application.@APPCOST@.@QUALIFIER@;

/**
 * Project @PROJECT@ <br>
 * Created by Algos
 * User: @USER@
 * Date: @TODAY@
 * Estende la Entity astratta AForm di tipo AView per visualizzare i fields
 * Annotated with @SpringComponent (obbligatorio)
 * Annotated with @Scope (obbligatorio = 'session')
 * Annotated with @Qualifier (obbligatorio) per permettere a Spring di istanziare la sottoclasse specifica
 * Annotated with @SpringView (obbligatorio) per gestire la visualizzazione di questa view con SprinNavigator
 * Annotated with @AIScript (facoltativo) per controllare la ri-creazione di questo file nello script del framework
 * Costruttore con un link @Autowired al IAPresenter, di tipo @Lazy per evitare un loop nella injection
 */
@Slf4j
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
@Qualifier(@QUALIFIER@)
@AIScript(sovrascrivibile = true)
public class @ENTITY@Form extends AForm<@ENTITY@> {


    private final TextField ordineField = new TextField("Ordine");
    private final TextField codeField = new TextField("Code");


    /**
     * Costruttore
     */
    public @ENTITY@Form(BiConsumer<@ENTITY@, AForm.Operation> itemSaver, Consumer<@ENTITY@> itemDeleter, IAService service) {
        super("@ENTITY@", itemSaver, itemDeleter, service);

        creaOrdineField();
        creaCodeField();
    }// end of constructor

    private void creaOrdineField() {
        getFormLayout().add(ordineField);
        getBinder()
                .forField(ordineField)
                .withConverter(new StringToIntegerConverter(0, "Must enter a number."))
                .withValidator(new IntegerRangeValidator("Ordine must be between 1 and 99.", 1, 99))
                .bind(@ENTITY@::getOrdine, @ENTITY@::setOrdine);
    }// end of method

    private void creaCodeField() {
        getFormLayout().add(codeField);
        getBinder()
                .forField(codeField)
                .withConverter(String::trim, String::trim)
                .withValidator(new StringLengthValidator("Code must contain at least 3 printable characters", 3, null))
                .withValidator(code -> ((@ENTITY@Service) service).findByKeyUnica(code) == null, "Code name must be unique")
                .bind(@ENTITY@::getCode, @ENTITY@::setCode);
        }// end of method

}// end of class

