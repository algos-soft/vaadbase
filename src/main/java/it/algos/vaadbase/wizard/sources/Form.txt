package it.algos.@MODULELOWER@.modules.@PACKAGE@;

import java.util.function.BiConsumer;
import java.util.function.Consumer;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.converter.StringToIntegerConverter;
import com.vaadin.flow.data.validator.IntegerRangeValidator;
import com.vaadin.flow.data.validator.StringLengthValidator;
import it.algos.vaadbase.annotation.AIScript;
import it.algos.vaadbase.presenter.IAPresenter;
import it.algos.vaadbase.ui.dialog.AForm;
import lombok.extern.slf4j.Slf4j;
import it.algos.vaadbase.backend.service.IAService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import static it.algos.@MODULELOWER@.application.@APPCOST@.@QUALIFIER@;

/**
 * Project @PROJECT@ <br>
 * Created by Algos
 * User: @USER@
 * Date: @TODAY@
 * Estende la Entity astratta AForm di tipo AView per visualizzare i fields
 * Annotated with @SpringComponent (obbligatorio)
 * Annotated with @Scope (obbligatorio = 'session')
 * Annotated with @Qualifier (obbligatorio) per permettere a Spring di istanziare la sottoclasse specifica
 * Annotated with @SpringView (obbligatorio) per gestire la visualizzazione di questa view con SprinNavigator
 * Annotated with @AIScript (facoltativo) per controllare la ri-creazione di questo file nello script del framework
 * Costruttore con un link @Autowired al IAPresenter, di tipo @Lazy per evitare un loop nella injection
 */
@Slf4j
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
@Qualifier(@QUALIFIER@)
@AIScript(sovrascrivibile = true)
public class @ENTITY@Form extends AForm<@ENTITY@> {

    /**
     * Costruttore
     */
    public @ENTITY@Form(BiConsumer<@ENTITY@, AForm.Operation> itemSaver, Consumer<@ENTITY@> itemDeleter, IAService service) {
        super("@ENTITY@", itemSaver, itemDeleter, service, @ENTITY@.class);
    }// end of constructor


//    @Override
//    protected void confirmDelete() {
//        openConfirmationDialog(
//                "Delete Prova “" + getCurrentItem().getCode() + "”?",
//                "There are some reviews associated with this category.",
//                "Deleting the category will mark the associated reviews as “undefined”."
//                        + "You may link the reviews to other categories on the edit page.");
//    }// end of method

}// end of class

