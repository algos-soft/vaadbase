package it.algos.@MODULELOWER@.modules.@PACKAGE@;

import com.vaadin.flow.spring.annotation.SpringComponent;
import lombok.extern.slf4j.Slf4j;
import org.bson.types.ObjectId;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import it.algos.vaadbase.annotation.AIScript;
import it.algos.vaadbase.backend.service.AService;
import it.algos.vaadbase.backend.entity.AEntity;
import static it.algos.@MODULELOWER@.application.@APPCOST@.@QUALIFIER@;

/**
 * Project @MODULELOWER@ <br>
 * Created by Algos <br>
 * User: @USER@ <br>
 * Date: @TODAY@ <br>
 * <br>
 * Estende la classe astratta AService. Layer di collegamento per la Repository. <br>
 * <br>
 * Annotated with @SpringComponent (obbligatorio) <br>
 * Annotated with @Service (ridondante) <br>
 * Annotated with @Scope (obbligatorio = 'singleton') <br>
 * Annotated with @Qualifier (obbligatorio) per permettere a Spring di istanziare la classe specifica <br>
 * Annotated with @@Slf4j (facoltativo) per i logs automatici <br>
 * Annotated with @AIScript (facoltativo Algos) per controllare la ri-creazione di questo file dal Wizard <br>
 */
@SpringComponent
@Service
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
@Qualifier(@QUALIFIER@)
@Slf4j
@AIScript(sovrascrivibile = false)
public class @ENTITY@Service extends AService {


    /**
     * La repository viene iniettata dal costruttore e passata al costruttore della superclasse, <br>
     * Spring costruisce una implementazione concreta dell'interfaccia MongoRepository (come previsto dal @Qualifier) <br>
     * Qui si una una interfaccia locale (col casting nel costruttore) per usare i metodi specifici <br>
     */
    private @ENTITY@Repository repository;


    /**
     * Costruttore @Autowired <br>
     * Si usa un @Qualifier(), per avere la sottoclasse specifica <br>
     * Si usa una costante statica, per essere sicuri di scrivere sempre uguali i riferimenti <br>
     *
     * @param repository per la persistenza dei dati
     */
    public @ENTITY@Service(@Qualifier(@QUALIFIER@) MongoRepository repository) {
        super(repository);
        this.repository = (@ENTITY@Repository) repository;
   }// end of Spring constructor


    @FIND@

    /**
     * Creazione in memoria di una nuova entity che NON viene salvata
     * Eventuali regolazioni iniziali delle property
     * Senza properties per compatibilità con la superclasse
     *
     * @return la nuova entity appena creata (non salvata)
     */
    @Override
    public @ENTITY@ newEntity() {
        return newEntity(@PARAMETERSNEWENTITY@);
    }// end of method


    @NEWENTITY@

    /**
     * Recupera una istanza della Entity usando la query della property specifica (obbligatoria ed unica) <br>
     *
     * @param code di riferimento (obbligatorio)
     *
     * @return istanza della Entity, null se non trovata
     */
    public @ENTITY@ findByKeyUnica(String code) {
        return repository.findByCode(code);
    }// end of method


    /**
     * Returns all instances of the type <br>
     * La Entity è EACompanyRequired.nonUsata. Non usa Company. <br>
     * Lista ordinata <br>
     *
     * @return lista ordinata di tutte le entities
     */
    @Override
    public List<@ENTITY@> findAll() {
        List<@ENTITY@> lista = null;

        @FINDALL@

        return lista;
    }// end of method


    /**
     * Fetches the entities whose 'main text property' matches the given filter text.
     * <p>
     * The matching is case insensitive. When passed an empty filter text,
     * the method returns all categories. The returned list is ordered by name.
     * The 'main text property' is different in each entity class and chosen in the specific subclass
     *
     * @param filter the filter text
     *
     * @return the list of matching entities
     */
    @Override
    public List<@ENTITY@> findFilter(String filter) {
        String normalizedFilter = filter.toLowerCase();
        List<@ENTITY@> lista = findAll();

        return lista.stream()
                .filter(entity -> entity.getCode().toLowerCase().contains(normalizedFilter))
                .collect(Collectors.toList());
    }// end of method


    /**
     * Opportunità di controllare (per le nuove schede) che la key unica non esista già. <br>
     * Invocato appena prima del save(), solo per una nuova entity <br>
     *
     * @param entityBean nuova da creare
     */
    @Override
    protected boolean isEsisteEntityKeyUnica(AEntity entityBean) {
        return findByKeyUnica(((@ENTITY@) entityBean).getCode()) != null;
    }// end of method

    @IDKEYSPECIFICA@

    @NEWORDINE@

}// end of class
